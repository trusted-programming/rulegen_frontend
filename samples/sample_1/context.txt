function changeExpressionStmt
	replace[statement]
		Expression[expression];
	by
		Expression[changeExpression][changeCSStatement];
end function

function changeIf
	replace*[statement]
		'if '( IfExp[expression] ')     
		        IfStmt[statement]
    		ElseClause[opt else_clause] 
	by
		'if '( IfExp[changeExpression] ')     
			IfStmt[translateStatement][translateBlock]
    		ElseClause[changeElseClause] 
end function

function changeSwitch
replace*[statement]
    'switch '( SwitchExp[expression] ') '{ SwitchAlters [repeat switch_alternative] '}
by
    'switch '( SwitchExp[changeExpression] ')'{ SwitchAlters [addBreak][fallThrough]
    							     [changeSwitchStmts] '}   	
end function

function changeWhile
	replace*[statement]
		'while '( WhileExp[expression] ') 
        		Stmts[statement]   
	by
		'while '( WhileExp[changeExpression]') 
        		Stmts[translateStatement][translateBlock]
end function

function changeDoWhile
	replace*[statement]
		'do
			Stmts[statement]
		'while '( DoWhileExp[expression] ');    
	by
		'do
			Stmts[translateStatement][translateBlock]
		'while '( DoWhileExp[changeExpression]'); 	
end function



function changeBreak
	replace*[statement]
		BreakStmt[break_statement]
	deconstruct BreakStmt
		'break LabelName[reference]';
	by
		BreakStmt[$ 'break 'goto]%'goto LabelName ';
end function

function changeContinue
	replace*[statement]
		ContinueStmt[continue_statement]
	deconstruct ContinueStmt
		'continue LabelName[reference]';
	by
		ContinueStmt[$ 'continue 'goto]%'goto LabelName ';
end function

function changeReturn
	replace*[statement]
		'return ReturnExp[opt expression] ';
	by
		'return ReturnExp[changeOptExpression] ';
end function

function changeThrow
	replace*[statement]
		'throw ThrowExp[expression] ';
	by
		'throw ThrowExp[changeExpression][changeCSException][changeCSStatement] ';
end function

function changeSynchronized
	replace*[statement]
    	    'synchronized '( SyncExp[expression] ')
        	Stmts[statement]                 
        by
            'lock '( SyncExp[changeExpression] ')
        	Stmts[translateStatement][translateBlock]                 
end function

function changeTry
	replace*[statement]
		'try TryBlock[block] Catches[repeat catch_clause] Finally[opt finally_clause]
	construct NewCatches[repeat catch_clause]
		_[changeCatch each Catches]
	by
		'try TryBlock[translateBlock] NewCatches Finally[changeFinally]
end function

function changeExpression
	replace*[expression]
		Expression[expression]
	by
		Expression[$ '>>> '>>]
end function

function changeCSStatement
	replace [expression]
		FirstId[id] '. SecondId[id]'. ThirdId[id]Remaining[repeat component]
	%to search for specified entry in the statemnts table
	construct Key[reference]
		FirstId.SecondId.ThirdId
	import StatementMapping [StmtMapper]
	% match the key entry with C# one
	deconstruct *[table_entry] StatementMapping
		Key -> CSStmt [reference]
	% to build a new valid expression 
	deconstruct CSStmt
		FirstCSId[id] CSRemaining[repeat component]
	%join the method arguements with the new part
	by 
		FirstCSId CSRemaining[. Remaining]
end function

function translateBlock
	replace*[block]
	   '{                                        
        	DeclOrStmt[repeat declaration_or_statement]     
    	   '}
	by
	   '{
	   	DeclOrStmt[translateVarDeclaration]
	   	          [translateClassInBlock]     
           	          [translateStatementInBlock]
           '}
end function

function changeElseClause
	replace[opt else_clause]
		'else ElseStmts [statement]
	by
		'else ElseStmts[translateStatement][translateBlock]
end function

function addBreak
	replace[repeat switch_alternative]
	  	SwitchAlters [repeat switch_alternative]   
	construct Length[number]
		 _[length SwitchAlters]
	construct Index[number]
		Length[- 1]
	construct LastAlter[repeat switch_alternative]
		SwitchAlters [tail Length]
	deconstruct LastAlter
		Label[switch_label]  Stmts[repeat declaration_or_statement] 
	%no break ?
	where not Stmts[ContainBreak]
	% all alternatives before the last one
	construct BeforeLastAlter[repeat switch_alternative]
		SwitchAlters [head Index]
	%a new break to be added
	construct Break[repeat declaration_or_statement]
		break ;
	construct NewStmts[repeat declaration_or_statement] 
		Stmts[. Break]
	%new statements with break
	construct NewLastAlter[repeat switch_alternative]
		Label NewStmts
	construct NewSwitchAlters[repeat switch_alternative]
		BeforeLastAlter[. NewLastAlter]
	by
		NewSwitchAlters  
end function

function fallThrough
	replace*[repeat switch_alternative]
	  	Label[switch_label]  Stmts[repeat declaration_or_statement] 
		RemainingSwitchAlters [repeat switch_alternative]   
	construct Length[number]
		 _[length Stmts]
	%no break and at least one statement is present
	where not Stmts[ContainBreak]
	where Length[ > 0]
	where not Stmts[isGoto]
	deconstruct RemainingSwitchAlters
		NextLabel[switch_label]  NextStmts[repeat declaration_or_statement] 
		RemainingAlters [repeat switch_alternative] 
	%goto the next alternative
	construct GotoStmt[repeat declaration_or_statement]
		goto NextLabel 
	%replace colon with semi colon to be a valid statement
	construct NewGotoStmt[repeat declaration_or_statement]
		GotoStmt[$ ': '; ]	
	construct NewStmts[repeat declaration_or_statement] 
		Stmts[. NewGotoStmt]
	%new statements with goto
	construct NewAlter[repeat switch_alternative]
		Label NewStmts
	%check the other cases also
	construct NewRemainingAlters[repeat switch_alternative]
		RemainingSwitchAlters[fallThrough]
	%the final result
	construct NewSwitchAlters[repeat switch_alternative]
		NewAlter[. NewRemainingAlters]
	by
		  NewSwitchAlters
end function

function changeSwitchStmts
replace*[repeat switch_alternative]
	  	Label[switch_label]  Stmts[repeat declaration_or_statement] 
		RemainingSwitchAlters [repeat switch_alternative]
	by
		Label  Stmts[translateStatementInBlock] 
		RemainingSwitchAlters[changeSwitchStmts] 

end function

function checkLocalVars
	replace*[local_variable_declaration]
		Modifiers[repeat modifier] 
		TypeSpecifier[type_specifier] 
		VarDecl[variable_declarators];
		construct AllVarDecl[repeat variable_declarator]
		_[^ VarDecl]
	deconstruct AllVarDecl
		FirstVarDecl[variable_declarator]Remaining[repeat variable_declarator]
	where not Modifiers[containFinal]
	by
		Modifiers[removeNonCSModifiers][changeProtected]
		TypeSpecifier[changeDataTypes][changeArrayTypes][changeExceptionName]
		VarDecl[changeCSException][changeCSStatement] ;	
end function

function changeOptExpression
	replace[opt expression]
		Expression[opt expression]
	by
		Expression[$ '>>> '>>]
end function

function changeCSException
	replace *[expression]
		exp[expression]
	deconstruct exp
		'new ExceptionName[qualified_name]()
	by
		'new ExceptionName[changeExceptionName]()
end function

function changeCatch CatchClause[catch_clause]
	replace[repeat catch_clause]
		Catches[repeat catch_clause]
	deconstruct CatchClause	
		'catch '( DataType[type_specifier] Name[variable_name] ') 
			CatchBlock[block] 
	construct NewCatchClause[catch_clause]
		'catch '( DataType[changeDataTypes][changeArrayTypes][changeExceptionName] Name ') 
			CatchBlock[translateBlock]  
	by
		Catches[. NewCatchClause]
end function

function changeFinally
	replace[opt finally_clause]
		'finally FinBlock[block] 
	by
		'finally FinBlock[translateBlock]
end function

function translateVarDeclaration
replace*[repeat declaration_or_statement]
	Var[local_variable_declaration]
	Remaining[repeat declaration_or_statement]
by
	Var[checkLocalVars]
	   [checkLocalConstants][checkLocalRunTimeConstants]
	   [checkLocalBlankConstants][changeArrayDimensions]
	Remaining[translateVarDeclaration]
end function

function translateClassInBlock 
	replace*[repeat declaration_or_statement]
		ClassInBlock[class_declaration]
		Remaining[repeat declaration_or_statement]
		construct S[stringlit]
		"//J2C# Unsupported:Classes within blocks must be removed manually"
		construct Comment[comment]
			_[unquote S]
	by
		Comment
		ClassInBlock
		Remaining[translateVarDeclaration]
end function

function translateStatementInBlock
	replace*[repeat declaration_or_statement]
		Stmnt[statement]
		Remaining[repeat declaration_or_statement]
	by
		Stmnt[translateStatement]
		Remaining[translateStatementInBlock]
end function

function ContainBreak
	match[repeat declaration_or_statement]
		Stmts[repeat declaration_or_statement]
	construct Length[number]
		 _[length Stmts]
	construct LastDecStmt[repeat declaration_or_statement]
		Stmts [tail Length]
	deconstruct *LastDecStmt
		breakStmt[break_statement]
end function

function isGoto
match[repeat declaration_or_statement]
		Stmts[repeat declaration_or_statement]
	construct Length[number]
		 _[length Stmts]
	construct LastDecStmt[repeat declaration_or_statement]
		Stmts [tail Length]
	deconstruct *LastDecStmt
		gotoStmt[goto_statement]
end function

function changeDataTypes
	replace[type_specifier]
		DataType[primitive_type]
	by
		DataType[changePrimDataTypes]
end function

function changeArrayTypes
	replace[type_specifier]
		ArrayType[type_name] Dimentions[repeat dimension+]
		deconstruct *[primitive_type] ArrayType
			PrimType[primitive_type]
	by
		PrimType[changePrimDataTypes]Dimentions
end function

function changeExceptionName
replace *[qualified_name]
	ExceptionName[qualified_name]
import RunTimeExceptionsMapper [ExceptionMapper]
deconstruct * [exceptionTable] RunTimeExceptionsMapper
	ExceptionName -> CSName [qualified_name]
by
	CSName
end function

function changeProtected
	replace * [ repeat modifier]
		'protected
	by
		'internal 'protected
end function

rule containFinal
	match [repeat modifier]
	   CurrentModifier[modifier]
	   RemainingModifiers[repeat modifier]
	where CurrentModifier[isFinal]
end rule

rule removeNonCSModifiers
	replace [repeat modifier]
		CurrentModifier[modifier]
		RemainingModifiers[repeat modifier]
	where CurrentModifier[isTransient][isVolatile]
	by
		RemainingModifiers
end rule

function checkLocalConstants
	replace[local_variable_declaration]
		Modifiers[repeat modifier] 
		TypeSpecifier[type_specifier] 
		VarDecl[variable_declarators];
	construct AllVarDecl[repeat variable_declarator]
		_[^ VarDecl]
	deconstruct AllVarDecl
		FirstVarDecl[variable_declarator]Remaining[repeat variable_declarator]
	where Modifiers[containFinal]
	where FirstVarDecl[isCompileTime]
	by
		Modifiers[finalToConst][changeProtected]
		TypeSpecifier[changeDataTypes][changeArrayTypes][changeExceptionName]
		VarDecl[changeCSException][changeCSStatement] ;	
end function

function checkLocalRunTimeConstants
	replace[local_variable_declaration]
		Modifiers[repeat modifier] 
		TypeSpecifier[type_specifier] 
		VarDecl[variable_declarators];
	construct AllVarDecl[repeat variable_declarator]
		_[^ VarDecl]
	deconstruct AllVarDecl
		FirstVarDecl[variable_declarator]Remaining[repeat variable_declarator]
	where Modifiers[containFinal]
	where not FirstVarDecl[isCompileTime]
	by
		Modifiers[changeProtected][removeNonCS]%remove final
		TypeSpecifier[changeDataTypes][changeArrayTypes][changeExceptionName]
		VarDecl[changeCSException][changeCSStatement] ;	
end function

function checkLocalBlankConstants
	replace[local_variable_declaration]
		Modifiers[repeat modifier] 
		TypeSpecifier[type_specifier] 
		VarDecl[variable_name];%no initializer
	where Modifiers[containFinal]
	by
		Modifiers[changeProtected][removeNonCS]%remove final
		TypeSpecifier[changeDataTypes][changeArrayTypes][changeExceptionName]
		VarDecl[changeCSException][changeCSStatement] ;	
end function

function changeArrayDimensions 
	replace[local_variable_declaration]
		Modifiers[repeat modifier] 
		DataType[type_name]
		VarName[declared_name]Dim [repeat dimension]VarInit [opt equals_variable_initializer];
	construct NewTypeSpecifier[type_specifier]
		DataType Dim
	by
		Modifiers NewTypeSpecifier VarName VarInit ;
end function

function changePrimDataTypes
	replace [primitive_type]
		JavaType[primitive_type]
		import PrimDataTypesMapping [DataMapper]
		deconstruct * [primitiveTable] PrimDataTypesMapping
			JavaType -> CSType [primitive_type]
	by
		CSType
end function

function isFinal
	match [modifier]
		'final
end function

function isTransient
	match [modifier]
		'transient
end function

function isVolatile
	match [modifier]
		'volatile
end function

function isCompileTime
	match[variable_declarator]
		VarName[variable_name] '= Value[literal]
end function

function finalToConst
	replace *[repeat modifier]
		CurrentModifier[modifier]
		RemainingModifiers[repeat modifier]
	where CurrentModifier[isFinal]
	by 
		'const
		RemainingModifiers
end function

rule removeNonCS
	replace [repeat modifier]
	   CurrentModifier[modifier]
	   RemainingModifiers[repeat modifier]
	where CurrentModifier[isFinal][isTransient][isVolatile]
	by
	   RemainingModifiers
end rule

